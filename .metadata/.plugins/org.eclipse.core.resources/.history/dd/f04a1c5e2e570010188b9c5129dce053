package mentor;

public class SixPracticeMagicSquare {

	public static void main(String[] args) {

		System.out.println("========4번========");
		//로직구성
		//) 마방진의 한 변의 길이를 상수로 선언
		//) 마방진의 넓이로 정수형 1차원 배열 선언
		//) 마방진을 표현할 정수형 2차원 배열 선언
		//) 좌표가 될 정수형 변수 2개 선언 및 초기화 (최초 : 0, 2)
		//) for문을 이용해 1차원 배열 초기화하기 ( 한 변의 길이가 5이므로 1부터 25까지 저장함. )
		//) 반복문1 (마방진의 넓이만큼 반복)
			//) 2차원 배열의 현재 좌표에 1차원 배열의 i번째 값 대입하기 (최초 대입 시 (x = 0, y = 2)에 1을 넣게 됨)
			//) if (i % SQUARE == SQUARE - 1)(i가 한 변의 길이보다 1 작을 때, 즉 한 변의 길이만큼의 횟수로 2차원 배열에 숫자를 대입했을 때) : x좌표를 아래로 내림(1 증가함), y는 변화 없음.
			//) else : x를 위로 한 칸 올림, y를 오른쪽으로 한 칸 이동( x--, y++ )
			//) if(x == -1)(x좌표가 위로 올라가며 마방진을 벗어난 경우) : x 좌표를 마방진의 최하단으로 이동
			//) if(y == 5(한 변의 길이))(y좌표가 오른쪽으로 이동하며 마방진을 벗어난 경우) : x 좌표를 마방진의 최하단으로 이동
			
		//) 반복문1 끝
		//) 반복문2 (
		//) 반복문2 끝
		

		final int SQUARE = 5; // 3, 7, 5, 9 ... 홀수로만 지정 가능
		int[] arr = new int[SQUARE * SQUARE];
		int[][] square = new int[SQUARE][SQUARE];
		int x = 0, y = 2;

		for (int i = 0; i < arr.length; i++) {
			arr[i] = i + 1;
		}

		for (int i = 0; i < SQUARE * SQUARE; i++) {
			square[x][y] = arr[i];

			if (i % SQUARE == SQUARE - 1) {
				x++;
			} else {
				x--;
				y++;
			}

			if (x == -1) {
				x = SQUARE - 1;
			}
			if (y == SQUARE) {
				y = 0;
			}
		}

		for (int i = 0; i < square.length; i++) {
			int[] ar = square[i];
			int sum = 0;
			for (int j = 0; j < ar.length; j++) {
				System.out.printf("%02d ", ar[j]);
				sum += ar[j];
			}
			System.out.println();
		}

	}
}
